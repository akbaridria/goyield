{
  "hints": {
    "createApplication(uint64,uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "getRound()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getWinners()uint64[3]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getRandomBytes()uint64[3]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "upateRound(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "round": {
          "type": "uint64",
          "key": "round"
        },
        "oracleApp": {
          "type": "uint64",
          "key": "oracleApp"
        },
        "totalSupply": {
          "type": "uint64",
          "key": "totalSupply"
        },
        "winnerNumbers": {
          "type": "bytes",
          "key": "winnerNumbers"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 3
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "ConsumeVRF",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "randomOracleApp",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "_round",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "getRound",
        "args": [],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "getWinners",
        "args": [],
        "desc": "",
        "returns": {
          "type": "uint64[3]",
          "desc": ""
        }
      },
      {
        "name": "getRandomBytes",
        "args": [],
        "desc": "",
        "returns": {
          "type": "uint64[3]",
          "desc": ""
        }
      },
      {
        "name": "upateRound",
        "args": [
          {
            "name": "value",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      }
    ]
  }
}