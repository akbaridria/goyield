#pragma version 9

// This TEAL was generated by TEALScript v0.60.1
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its repsective branch will be "NOT_IMPLMENTED" which just contains "err"
txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp

NOT_IMPLEMENTED:
	err

// createApplication(uint64,uint64)void
abi_route_createApplication:
	// _round: uint64
	txna ApplicationArgs 2
	btoi

	// randomOracleApp: uint64
	txna ApplicationArgs 1
	btoi

	// execute createApplication(uint64,uint64)void
	callsub createApplication
	int 1
	return

createApplication:
	proto 2 0

	// contracts/consumeVrf.algo.ts:15
	// this.oracleApp.value = randomOracleApp
	byte 0x6f7261636c65417070 // "oracleApp"
	frame_dig -1 // randomOracleApp: uint64
	app_global_put

	// contracts/consumeVrf.algo.ts:16
	// this.round.value = _round
	byte 0x726f756e64 // "round"
	frame_dig -2 // _round: uint64
	app_global_put
	retsub

// getRound()uint64
//
// // read methods
abi_route_getRound:
	// execute getRound()uint64
	callsub getRound
	int 1
	return

getRound:
	proto 0 0

	// contracts/consumeVrf.algo.ts:22
	// return this.round.value;
	byte 0x726f756e64 // "round"
	app_global_get
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// getWinners()uint64[3]
abi_route_getWinners:
	// execute getWinners()uint64[3]
	callsub getWinners
	int 1
	return

getWinners:
	proto 0 0

	// contracts/consumeVrf.algo.ts:26
	// return this.winnerNumbers.value;
	byte 0x77696e6e65724e756d62657273 // "winnerNumbers"
	app_global_get
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// getRandomBytes()uint64[3]
//
// // write methods
abi_route_getRandomBytes:
	byte 0x; dupn 4 // push empty bytes to fill the stack frame for this subroutine's local variables

	// execute getRandomBytes()uint64[3]
	callsub getRandomBytes
	int 1
	return

getRandomBytes:
	proto 5 0

	// contracts/consumeVrf.algo.ts:32
	// round = this.round.value
	byte 0x726f756e64 // "round"
	app_global_get
	frame_bury -1 // round: uint64

	// contracts/consumeVrf.algo.ts:33
	// data = sendMethodCall<[uint64, bytes], bytes>({
	//       name: 'must_get',
	//       methodArgs: [round, ""],
	//       applicationID: Application.fromID(this.oracleApp.value),
	//       fee: 0,
	//       onCompletion: 'NoOp',
	//     })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "must_get(uint64,byte[])byte[]"
	itxn_field ApplicationArgs

	// contracts/consumeVrf.algo.ts:35
	// methodArgs: [round, ""]
	frame_dig -1 // round: uint64
	itob
	itxn_field ApplicationArgs
	byte 0x0000
	itxn_field ApplicationArgs

	// contracts/consumeVrf.algo.ts:36
	// applicationID: Application.fromID(this.oracleApp.value)
	byte 0x6f7261636c65417070 // "oracleApp"
	app_global_get
	itxn_field ApplicationID

	// contracts/consumeVrf.algo.ts:37
	// fee: 0
	int 0
	itxn_field Fee

	// contracts/consumeVrf.algo.ts:38
	// onCompletion: 'NoOp'
	int NoOp
	itxn_field OnCompletion

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	frame_bury -2 // data: bytes

	// contracts/consumeVrf.algo.ts:42
	// result: StaticArray<uint64, 3> = [0, 0, 0]
	byte 0x000000000000000000000000000000000000000000000000
	frame_bury -3 // result: uint64[3]

	// contracts/consumeVrf.algo.ts:43
	// x: uint64 = extract_uint64(data, 8)
	frame_dig -2 // data: bytes
	int 8
	extract_uint64
	frame_bury -4 // x: uint64

	// contracts/consumeVrf.algo.ts:45
	// i = 0
	int 0
	frame_bury -5 // i: uint64

for_0:
	frame_dig -5 // i: uint64
	int 3
	<
	bz for_0_end

	// contracts/consumeVrf.algo.ts:46
	// result[i] = x % 1000
	frame_dig -3 // result: uint64[3]
	store 0 // full array
	int 0 // initial offset
	frame_dig -5 // i: uint64
	int 8
	* // acc * typeLength
	+
	load 0 // full array
	swap
	frame_dig -4 // x: uint64
	int 1000
	%
	itob
	replace3
	frame_bury -3 // result: uint64[3]

	// contracts/consumeVrf.algo.ts:47
	// x = x / 1000
	frame_dig -4 // x: uint64
	int 1000
	/
	frame_bury -4 // x: uint64

	// contracts/consumeVrf.algo.ts:45
	// i = i + 1
	frame_dig -5 // i: uint64
	int 1
	+
	frame_bury -5 // i: uint64
	b for_0

for_0_end:
	// contracts/consumeVrf.algo.ts:49
	// this.round.value = round + 100_000
	byte 0x726f756e64 // "round"
	frame_dig -1 // round: uint64
	int 100_000
	+
	app_global_put

	// contracts/consumeVrf.algo.ts:50
	// this.winnerNumbers.value = result
	byte 0x77696e6e65724e756d62657273 // "winnerNumbers"
	frame_dig -3 // result: uint64[3]
	app_global_put

	// contracts/consumeVrf.algo.ts:51
	// return result;
	byte 0x151f7c75
	frame_dig -3 // result: uint64[3]
	concat
	log
	retsub

// upateRound(uint64)void
abi_route_upateRound:
	// value: uint64
	txna ApplicationArgs 1
	btoi

	// execute upateRound(uint64)void
	callsub upateRound
	int 1
	return

upateRound:
	proto 1 0

	// contracts/consumeVrf.algo.ts:55
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	assert
	==
	assert

	// contracts/consumeVrf.algo.ts:56
	// this.round.value = value
	byte 0x726f756e64 // "round"
	frame_dig -1 // value: uint64
	app_global_put
	retsub

create_NoOp:
	method "createApplication(uint64,uint64)void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "getRound()uint64"
	method "getWinners()uint64[3]"
	method "getRandomBytes()uint64[3]"
	method "upateRound(uint64)void"
	txna ApplicationArgs 0
	match abi_route_getRound abi_route_getWinners abi_route_getRandomBytes abi_route_upateRound
	err