/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import type { TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication(string,string)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "arc72_ownerOf(uint64)address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc72_tokenURI(uint64)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc72_getImage(uint64)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc72_totalSupply()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc72_getApproved(uint64)address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc72_isApprovedForAll(address,address)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc72_balanceOf(address)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc72_custom_getAllTokenIdsByAddr(address)uint64[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc72_custom_getTokenDetail(uint64)(address,string,string,address)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "udpdateTemplate(string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc72_approve(address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc72_setApprovalForAll(address,bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc72_transferFrom(address,address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "mint(string,string,string,string,string,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "counter": {
          "type": "uint64",
          "key": "counter"
        },
        "name": {
          "type": "bytes",
          "key": "name"
        },
        "symbol": {
          "type": "bytes",
          "key": "symbol"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 2,
      "num_uints": 1
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "GoYieldNFT",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "_name",
            "type": "string",
            "desc": ""
          },
          {
            "name": "_symbol",
            "type": "string",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "arc72_ownerOf",
        "args": [
          {
            "name": "_tokenId",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "address",
          "desc": ""
        }
      },
      {
        "name": "arc72_tokenURI",
        "args": [
          {
            "name": "_tokenId",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "string",
          "desc": ""
        }
      },
      {
        "name": "arc72_getImage",
        "args": [
          {
            "name": "_tokenId",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "string",
          "desc": ""
        }
      },
      {
        "name": "arc72_totalSupply",
        "args": [],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "arc72_getApproved",
        "args": [
          {
            "name": "_tokenId",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "address",
          "desc": ""
        }
      },
      {
        "name": "arc72_isApprovedForAll",
        "args": [
          {
            "name": "_owner",
            "type": "address",
            "desc": ""
          },
          {
            "name": "_operator",
            "type": "address",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "bool",
          "desc": ""
        }
      },
      {
        "name": "arc72_balanceOf",
        "args": [
          {
            "name": "_owner",
            "type": "address",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "arc72_custom_getAllTokenIdsByAddr",
        "args": [
          {
            "name": "_owner",
            "type": "address",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64[]",
          "desc": ""
        }
      },
      {
        "name": "arc72_custom_getTokenDetail",
        "args": [
          {
            "name": "_tokenId",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "(address,string,string,address)",
          "desc": ""
        }
      },
      {
        "name": "udpdateTemplate",
        "args": [
          {
            "name": "_template",
            "type": "string",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "arc72_approve",
        "args": [
          {
            "name": "_approved",
            "type": "address",
            "desc": ""
          },
          {
            "name": "_tokenId",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "arc72_setApprovalForAll",
        "args": [
          {
            "name": "_operator",
            "type": "address",
            "desc": ""
          },
          {
            "name": "_approved",
            "type": "bool",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "arc72_transferFrom",
        "args": [
          {
            "name": "_from",
            "type": "address",
            "desc": ""
          },
          {
            "name": "_to",
            "type": "address",
            "desc": ""
          },
          {
            "name": "_tokenId",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "mint",
        "args": [
          {
            "name": "backgroundColor",
            "type": "string",
            "desc": ""
          },
          {
            "name": "objectColor",
            "type": "string",
            "desc": ""
          },
          {
            "name": "translateX",
            "type": "string",
            "desc": ""
          },
          {
            "name": "translateY",
            "type": "string",
            "desc": ""
          },
          {
            "name": "tokenUri",
            "type": "string",
            "desc": ""
          },
          {
            "name": "to",
            "type": "address",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the GoYieldNft smart contract.
 */
export type GoYieldNft = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(string,string)void' | 'createApplication', {
      argsObj: {
        _name: string
        _symbol: string
      }
      argsTuple: [_name: string, _symbol: string]
      returns: void
    }>
    & Record<'arc72_ownerOf(uint64)address' | 'arc72_ownerOf', {
      argsObj: {
        _tokenId: bigint | number
      }
      argsTuple: [_tokenId: bigint | number]
      returns: string
    }>
    & Record<'arc72_tokenURI(uint64)string' | 'arc72_tokenURI', {
      argsObj: {
        _tokenId: bigint | number
      }
      argsTuple: [_tokenId: bigint | number]
      returns: string
    }>
    & Record<'arc72_getImage(uint64)string' | 'arc72_getImage', {
      argsObj: {
        _tokenId: bigint | number
      }
      argsTuple: [_tokenId: bigint | number]
      returns: string
    }>
    & Record<'arc72_totalSupply()uint64' | 'arc72_totalSupply', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'arc72_getApproved(uint64)address' | 'arc72_getApproved', {
      argsObj: {
        _tokenId: bigint | number
      }
      argsTuple: [_tokenId: bigint | number]
      returns: string
    }>
    & Record<'arc72_isApprovedForAll(address,address)bool' | 'arc72_isApprovedForAll', {
      argsObj: {
        _owner: string
        _operator: string
      }
      argsTuple: [_owner: string, _operator: string]
      returns: boolean
    }>
    & Record<'arc72_balanceOf(address)uint64' | 'arc72_balanceOf', {
      argsObj: {
        _owner: string
      }
      argsTuple: [_owner: string]
      returns: bigint
    }>
    & Record<'arc72_custom_getAllTokenIdsByAddr(address)uint64[]' | 'arc72_custom_getAllTokenIdsByAddr', {
      argsObj: {
        _owner: string
      }
      argsTuple: [_owner: string]
      returns: bigint[]
    }>
    & Record<'arc72_custom_getTokenDetail(uint64)(address,string,string,address)' | 'arc72_custom_getTokenDetail', {
      argsObj: {
        _tokenId: bigint | number
      }
      argsTuple: [_tokenId: bigint | number]
      returns: [string, string, string, string]
    }>
    & Record<'udpdateTemplate(string)void' | 'udpdateTemplate', {
      argsObj: {
        _template: string
      }
      argsTuple: [_template: string]
      returns: void
    }>
    & Record<'arc72_approve(address,uint64)void' | 'arc72_approve', {
      argsObj: {
        _approved: string
        _tokenId: bigint | number
      }
      argsTuple: [_approved: string, _tokenId: bigint | number]
      returns: void
    }>
    & Record<'arc72_setApprovalForAll(address,bool)void' | 'arc72_setApprovalForAll', {
      argsObj: {
        _operator: string
        _approved: boolean
      }
      argsTuple: [_operator: string, _approved: boolean]
      returns: void
    }>
    & Record<'arc72_transferFrom(address,address,uint64)void' | 'arc72_transferFrom', {
      argsObj: {
        _from: string
        _to: string
        _tokenId: bigint | number
      }
      argsTuple: [_from: string, _to: string, _tokenId: bigint | number]
      returns: void
    }>
    & Record<'mint(string,string,string,string,string,address)void' | 'mint', {
      argsObj: {
        backgroundColor: string
        objectColor: string
        translateX: string
        translateY: string
        tokenUri: string
        to: string
      }
      argsTuple: [backgroundColor: string, objectColor: string, translateX: string, translateY: string, tokenUri: string, to: string]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'counter'?: IntegerState
      'name'?: BinaryState
      'symbol'?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type GoYieldNftSig = keyof GoYieldNft['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends GoYieldNftSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the GoYieldNft smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends GoYieldNftSig> = GoYieldNft['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the GoYieldNft smart contract to the method's return type
 */
export type MethodReturn<TSignature extends GoYieldNftSig> = GoYieldNft['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type GoYieldNftCreateCalls = (typeof GoYieldNftCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type GoYieldNftCreateCallParams =
  | (TypedCallParams<'createApplication(string,string)void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type GoYieldNftDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: GoYieldNftCreateCalls) => GoYieldNftCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class GoYieldNftCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the GoYieldNFT smart contract using the createApplication(string,string)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication(string,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication(string,string)void' as const,
          methodArgs: Array.isArray(args) ? args : [args._name, args._symbol],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the arc72_ownerOf(uint64)address ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc72OwnerOf(args: MethodArgs<'arc72_ownerOf(uint64)address'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc72_ownerOf(uint64)address' as const,
      methodArgs: Array.isArray(args) ? args : [args._tokenId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc72_tokenURI(uint64)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc72TokenUri(args: MethodArgs<'arc72_tokenURI(uint64)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc72_tokenURI(uint64)string' as const,
      methodArgs: Array.isArray(args) ? args : [args._tokenId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc72_getImage(uint64)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc72GetImage(args: MethodArgs<'arc72_getImage(uint64)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc72_getImage(uint64)string' as const,
      methodArgs: Array.isArray(args) ? args : [args._tokenId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc72_totalSupply()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc72TotalSupply(args: MethodArgs<'arc72_totalSupply()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc72_totalSupply()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc72_getApproved(uint64)address ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc72GetApproved(args: MethodArgs<'arc72_getApproved(uint64)address'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc72_getApproved(uint64)address' as const,
      methodArgs: Array.isArray(args) ? args : [args._tokenId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc72_isApprovedForAll(address,address)bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc72IsApprovedForAll(args: MethodArgs<'arc72_isApprovedForAll(address,address)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc72_isApprovedForAll(address,address)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args._owner, args._operator],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc72_balanceOf(address)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc72BalanceOf(args: MethodArgs<'arc72_balanceOf(address)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc72_balanceOf(address)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args._owner],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc72_custom_getAllTokenIdsByAddr(address)uint64[] ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc72CustomGetAllTokenIdsByAddr(args: MethodArgs<'arc72_custom_getAllTokenIdsByAddr(address)uint64[]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc72_custom_getAllTokenIdsByAddr(address)uint64[]' as const,
      methodArgs: Array.isArray(args) ? args : [args._owner],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc72_custom_getTokenDetail(uint64)(address,string,string,address) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc72CustomGetTokenDetail(args: MethodArgs<'arc72_custom_getTokenDetail(uint64)(address,string,string,address)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc72_custom_getTokenDetail(uint64)(address,string,string,address)' as const,
      methodArgs: Array.isArray(args) ? args : [args._tokenId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the udpdateTemplate(string)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static udpdateTemplate(args: MethodArgs<'udpdateTemplate(string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'udpdateTemplate(string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args._template],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc72_approve(address,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc72Approve(args: MethodArgs<'arc72_approve(address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc72_approve(address,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args._approved, args._tokenId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc72_setApprovalForAll(address,bool)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc72SetApprovalForAll(args: MethodArgs<'arc72_setApprovalForAll(address,bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc72_setApprovalForAll(address,bool)void' as const,
      methodArgs: Array.isArray(args) ? args : [args._operator, args._approved],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc72_transferFrom(address,address,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc72TransferFrom(args: MethodArgs<'arc72_transferFrom(address,address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc72_transferFrom(address,address,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args._from, args._to, args._tokenId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the mint(string,string,string,string,string,address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static mint(args: MethodArgs<'mint(string,string,string,string,string,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'mint(string,string,string,string,string,address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.backgroundColor, args.objectColor, args.translateX, args.translateY, args.tokenUri, args.to],
      ...params,
    }
  }
}

/**
 * A client to make calls to the GoYieldNFT smart contract
 */
export class GoYieldNftClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `GoYieldNftClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof GoYieldNft['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the GoYieldNFT smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: GoYieldNftDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(GoYieldNftCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the GoYieldNFT smart contract using the createApplication(string,string)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication(string,string)void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'createApplication(string,string)void'>>> {
        return $this.mapReturnValue(await $this.appClient.create(GoYieldNftCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the GoYieldNFT smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the arc72_ownerOf(uint64)address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc72OwnerOf(args: MethodArgs<'arc72_ownerOf(uint64)address'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GoYieldNftCallFactory.arc72OwnerOf(args, params))
  }

  /**
   * Calls the arc72_tokenURI(uint64)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc72TokenUri(args: MethodArgs<'arc72_tokenURI(uint64)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GoYieldNftCallFactory.arc72TokenUri(args, params))
  }

  /**
   * Calls the arc72_getImage(uint64)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc72GetImage(args: MethodArgs<'arc72_getImage(uint64)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GoYieldNftCallFactory.arc72GetImage(args, params))
  }

  /**
   * Calls the arc72_totalSupply()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc72TotalSupply(args: MethodArgs<'arc72_totalSupply()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GoYieldNftCallFactory.arc72TotalSupply(args, params))
  }

  /**
   * Calls the arc72_getApproved(uint64)address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc72GetApproved(args: MethodArgs<'arc72_getApproved(uint64)address'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GoYieldNftCallFactory.arc72GetApproved(args, params))
  }

  /**
   * Calls the arc72_isApprovedForAll(address,address)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc72IsApprovedForAll(args: MethodArgs<'arc72_isApprovedForAll(address,address)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GoYieldNftCallFactory.arc72IsApprovedForAll(args, params))
  }

  /**
   * Calls the arc72_balanceOf(address)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc72BalanceOf(args: MethodArgs<'arc72_balanceOf(address)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GoYieldNftCallFactory.arc72BalanceOf(args, params))
  }

  /**
   * Calls the arc72_custom_getAllTokenIdsByAddr(address)uint64[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc72CustomGetAllTokenIdsByAddr(args: MethodArgs<'arc72_custom_getAllTokenIdsByAddr(address)uint64[]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GoYieldNftCallFactory.arc72CustomGetAllTokenIdsByAddr(args, params))
  }

  /**
   * Calls the arc72_custom_getTokenDetail(uint64)(address,string,string,address) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc72CustomGetTokenDetail(args: MethodArgs<'arc72_custom_getTokenDetail(uint64)(address,string,string,address)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GoYieldNftCallFactory.arc72CustomGetTokenDetail(args, params))
  }

  /**
   * Calls the udpdateTemplate(string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public udpdateTemplate(args: MethodArgs<'udpdateTemplate(string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GoYieldNftCallFactory.udpdateTemplate(args, params))
  }

  /**
   * Calls the arc72_approve(address,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc72Approve(args: MethodArgs<'arc72_approve(address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GoYieldNftCallFactory.arc72Approve(args, params))
  }

  /**
   * Calls the arc72_setApprovalForAll(address,bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc72SetApprovalForAll(args: MethodArgs<'arc72_setApprovalForAll(address,bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GoYieldNftCallFactory.arc72SetApprovalForAll(args, params))
  }

  /**
   * Calls the arc72_transferFrom(address,address,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc72TransferFrom(args: MethodArgs<'arc72_transferFrom(address,address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GoYieldNftCallFactory.arc72TransferFrom(args, params))
  }

  /**
   * Calls the mint(string,string,string,string,string,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public mint(args: MethodArgs<'mint(string,string,string,string,string,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GoYieldNftCallFactory.mint(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<GoYieldNft['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get counter() {
        return GoYieldNftClient.getIntegerState(state, 'counter')
      },
      get name() {
        return GoYieldNftClient.getBinaryState(state, 'name')
      },
      get symbol() {
        return GoYieldNftClient.getBinaryState(state, 'symbol')
      },
    }
  }

  public compose(): GoYieldNftComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      arc72OwnerOf(args: MethodArgs<'arc72_ownerOf(uint64)address'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc72OwnerOf(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc72TokenUri(args: MethodArgs<'arc72_tokenURI(uint64)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc72TokenUri(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc72GetImage(args: MethodArgs<'arc72_getImage(uint64)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc72GetImage(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc72TotalSupply(args: MethodArgs<'arc72_totalSupply()uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc72TotalSupply(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc72GetApproved(args: MethodArgs<'arc72_getApproved(uint64)address'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc72GetApproved(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc72IsApprovedForAll(args: MethodArgs<'arc72_isApprovedForAll(address,address)bool'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc72IsApprovedForAll(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc72BalanceOf(args: MethodArgs<'arc72_balanceOf(address)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc72BalanceOf(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc72CustomGetAllTokenIdsByAddr(args: MethodArgs<'arc72_custom_getAllTokenIdsByAddr(address)uint64[]'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc72CustomGetAllTokenIdsByAddr(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc72CustomGetTokenDetail(args: MethodArgs<'arc72_custom_getTokenDetail(uint64)(address,string,string,address)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc72CustomGetTokenDetail(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      udpdateTemplate(args: MethodArgs<'udpdateTemplate(string)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.udpdateTemplate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc72Approve(args: MethodArgs<'arc72_approve(address,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc72Approve(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc72SetApprovalForAll(args: MethodArgs<'arc72_setApprovalForAll(address,bool)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc72SetApprovalForAll(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc72TransferFrom(args: MethodArgs<'arc72_transferFrom(address,address,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc72TransferFrom(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      mint(args: MethodArgs<'mint(string,string,string,string,string,address)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.mint(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as GoYieldNftComposer
  }
}
export type GoYieldNftComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the arc72_ownerOf(uint64)address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc72OwnerOf(args: MethodArgs<'arc72_ownerOf(uint64)address'>, params?: AppClientCallCoreParams & CoreAppCallArgs): GoYieldNftComposer<[...TReturns, MethodReturn<'arc72_ownerOf(uint64)address'>]>

  /**
   * Calls the arc72_tokenURI(uint64)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc72TokenUri(args: MethodArgs<'arc72_tokenURI(uint64)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): GoYieldNftComposer<[...TReturns, MethodReturn<'arc72_tokenURI(uint64)string'>]>

  /**
   * Calls the arc72_getImage(uint64)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc72GetImage(args: MethodArgs<'arc72_getImage(uint64)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): GoYieldNftComposer<[...TReturns, MethodReturn<'arc72_getImage(uint64)string'>]>

  /**
   * Calls the arc72_totalSupply()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc72TotalSupply(args: MethodArgs<'arc72_totalSupply()uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): GoYieldNftComposer<[...TReturns, MethodReturn<'arc72_totalSupply()uint64'>]>

  /**
   * Calls the arc72_getApproved(uint64)address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc72GetApproved(args: MethodArgs<'arc72_getApproved(uint64)address'>, params?: AppClientCallCoreParams & CoreAppCallArgs): GoYieldNftComposer<[...TReturns, MethodReturn<'arc72_getApproved(uint64)address'>]>

  /**
   * Calls the arc72_isApprovedForAll(address,address)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc72IsApprovedForAll(args: MethodArgs<'arc72_isApprovedForAll(address,address)bool'>, params?: AppClientCallCoreParams & CoreAppCallArgs): GoYieldNftComposer<[...TReturns, MethodReturn<'arc72_isApprovedForAll(address,address)bool'>]>

  /**
   * Calls the arc72_balanceOf(address)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc72BalanceOf(args: MethodArgs<'arc72_balanceOf(address)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): GoYieldNftComposer<[...TReturns, MethodReturn<'arc72_balanceOf(address)uint64'>]>

  /**
   * Calls the arc72_custom_getAllTokenIdsByAddr(address)uint64[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc72CustomGetAllTokenIdsByAddr(args: MethodArgs<'arc72_custom_getAllTokenIdsByAddr(address)uint64[]'>, params?: AppClientCallCoreParams & CoreAppCallArgs): GoYieldNftComposer<[...TReturns, MethodReturn<'arc72_custom_getAllTokenIdsByAddr(address)uint64[]'>]>

  /**
   * Calls the arc72_custom_getTokenDetail(uint64)(address,string,string,address) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc72CustomGetTokenDetail(args: MethodArgs<'arc72_custom_getTokenDetail(uint64)(address,string,string,address)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): GoYieldNftComposer<[...TReturns, MethodReturn<'arc72_custom_getTokenDetail(uint64)(address,string,string,address)'>]>

  /**
   * Calls the udpdateTemplate(string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  udpdateTemplate(args: MethodArgs<'udpdateTemplate(string)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): GoYieldNftComposer<[...TReturns, MethodReturn<'udpdateTemplate(string)void'>]>

  /**
   * Calls the arc72_approve(address,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc72Approve(args: MethodArgs<'arc72_approve(address,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): GoYieldNftComposer<[...TReturns, MethodReturn<'arc72_approve(address,uint64)void'>]>

  /**
   * Calls the arc72_setApprovalForAll(address,bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc72SetApprovalForAll(args: MethodArgs<'arc72_setApprovalForAll(address,bool)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): GoYieldNftComposer<[...TReturns, MethodReturn<'arc72_setApprovalForAll(address,bool)void'>]>

  /**
   * Calls the arc72_transferFrom(address,address,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc72TransferFrom(args: MethodArgs<'arc72_transferFrom(address,address,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): GoYieldNftComposer<[...TReturns, MethodReturn<'arc72_transferFrom(address,address,uint64)void'>]>

  /**
   * Calls the mint(string,string,string,string,string,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mint(args: MethodArgs<'mint(string,string,string,string,string,address)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): GoYieldNftComposer<[...TReturns, MethodReturn<'mint(string,string,string,string,string,address)void'>]>

  /**
   * Makes a clear_state call to an existing instance of the GoYieldNFT smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): GoYieldNftComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): GoYieldNftComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<GoYieldNftComposerResults<TReturns>>
}
export type GoYieldNftComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
